import cv2 as cv
import glob
import numpy as np
from calibCheckmate import *
from StereoREc import *

print("cam1:")
mtx1, dist1 = calibrate_camera(images_folder="calibCMW\\cam1\\*.bmp", rows=3, columns=5, world_scaling=30, camNumber=1)
print("cam2:")
mtx2, dist2 = calibrate_camera(images_folder="calibCMW\\cam2\\*.bmp", rows=3, columns=5, world_scaling=30, camNumber=2)
print("stereocalib:")
R, T = stereo_calibrate(mtx1, dist1, mtx2, dist2, frames_folder1='calibCMW\\cam1\\*.bmp',frames_folder2='calibCMW\\cam2\\*.bmp', rows=3, columns=5, world_scaling=30)
print("CircleCalib:")
#mtx2, dist2 = calibrate_cameraCircle(images_folder="calib_row\\cam1\\*.bmp", rows=41, columns=41, world_scaling=18, camNumber=1)
triangulate (mtx1=mtx1, mtx2=mtx2, cam1Points="PointsTriangulation\\output1 (3).txt", cam2Points="PointsTriangulation\\output2 (3).txt", R=R, T=T)

#flannBasedMatcher(image1="imgCheckmate\\trianBotl\\1.bmp", image2="imgCheckmate\\trianBotl\\2.bmp")
#findCircle(imageName="imgCheckmate\\trianBotl\\1.bmp")
#featureMatch(imageName1="imgCheckmate\\trianBotl\\1.bmp", imageName2="id:\MLC\SuperGluePretrainedNetwork\match_pairs.pymgCheckmate\\trianBotl\\2.bmp")

#plane_sweep_gauss(im_l='imgCheckmate\\cam1b\\1dz10.bmp', im_r='imgCheckmate\\cam2b\\2dz10.bmp', start=10, steps=8, wid=13)

